{"version":3,"sources":["components/Section/Section.jsx","components/InputForm/InputForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.js","index.js","components/App/App.module.css"],"names":["Section","title","children","className","InputForm","addContact","onSubmit","type","name","pattern","required","Filter","contacts","filterContact","length","onChange","ContactList","filter","deleteContact","contact","toLowerCase","includes","map","number","id","onClick","uuidv4","App","useState","setContacts","setFilter","useEffect","localStorageContacts","JSON","parse","localStorage","getItem","setItem","stringify","s","app","evt","preventDefault","doubleContact","find","target","elements","value","alert","newContact","prevState","arrayWithoutDeletedContact","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.88673c24.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport function Section({ title, children }) {\r\n  return (\r\n    <div className=\"section\">\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './InputForm.module.css';\r\n\r\nexport function InputForm({ addContact }) {\r\n  return (\r\n    <form onSubmit={addContact}>\r\n      <label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nInputForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nexport function Filter({ contacts, filterContact }) {\r\n  const moreTwoContacts = contacts.length > 2;\r\n  return (\r\n    moreTwoContacts && (\r\n      <label>\r\n        Find contacts by name\r\n        <input type=\"text\" onChange={filterContact} />\r\n      </label>\r\n    )\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  info: PropTypes.shape({\r\n    contacts: PropTypes.array,\r\n  }),\r\n  filterContact: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport function ContactList({ contacts, filter, deleteContact, children }) {\r\n  return (\r\n    <div>\r\n      <h2>Contacts</h2>\r\n      {children}\r\n      <ul>\r\n        {!filter\r\n          ? contacts.map(contact => (\r\n              <li key={uuidv4()}>\r\n                {contact.name} {contact.number}\r\n                <button type=\"button\" id={contact.id} onClick={deleteContact}>\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))\r\n          : contacts\r\n              .filter(contact => contact.name.toLowerCase().includes(filter))\r\n              .map(contact => (\r\n                <li key={contact.id}>\r\n                  {contact.name} {contact.number}\r\n                  <button type=\"button\" id={contact.id} onClick={deleteContact}>\r\n                    Delete\r\n                  </button>\r\n                </li>\r\n              ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  filter: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n  children: PropTypes.node,\r\n};\r\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Section } from '../Section/Section.jsx';\nimport { InputForm } from '../InputForm/InputForm.jsx';\nimport { Filter } from '../Filter/Filter.jsx';\nimport { ContactList } from '../ContactList/ContactList.jsx';\nimport s from './App.module.css';\n\nexport function App() {\n  const [contacts, setContacts] = useState([\n    { id: uuidv4(), name: 'Rosie Simpson', number: '459-12-56' },\n    { id: uuidv4(), name: 'Hermione Kline', number: '443-89-12' },\n    { id: uuidv4(), name: 'Eden Clements', number: '645-17-79' },\n    { id: uuidv4(), name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n\n  const [filter, setFilter] = useState('');\n\n  const handleAddContact = evt => {\n    evt.preventDefault();\n\n    const doubleContact = contacts.find(\n      contact =>\n        evt.target.elements[0].value.toLowerCase() ===\n        contact.name.toLowerCase(),\n    );\n\n    if (!doubleContact) {\n      const newContact = {\n        id: uuidv4(),\n        name: evt.target.elements.name.value,\n        number: evt.target.elements.number.value,\n      };\n\n      setContacts(prevState => [...prevState, newContact]);\n    } else {\n      alert(doubleContact.name + 'is alredy in contacts');\n    }\n\n    evt.target.elements[0].value = '';\n    evt.target.elements[1].value = '';\n  };\n\n  const handleFilterContact = evt => {\n    evt.preventDefault();\n\n    setFilter(evt.target.value.toLowerCase());\n  };\n\n  const handleDeleteContact = evt => {\n    const arrayWithoutDeletedContact = contacts.filter(contact => {\n      return contact.id !== evt.target.id;\n    });\n\n    setContacts([...arrayWithoutDeletedContact]);\n  };\n\n  useEffect(() => {\n    const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (localStorageContacts) {\n      setContacts(localStorageContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <div className={s.app}>\n      <Section title={'Phonebook'}>\n        <InputForm addContact={handleAddContact} />\n        <ContactList\n          contacts={contacts}\n          filter={filter}\n          deleteContact={handleDeleteContact}\n        >\n          <Filter contacts={contacts} filterContact={handleFilterContact} />\n        </ContactList>\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2qrXj\"};"],"sourceRoot":""}